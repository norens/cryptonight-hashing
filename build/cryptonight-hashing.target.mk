# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := cryptonight-hashing
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=cryptonight-hashing' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG' \
	'-DV8_ENABLE_CHECKS'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-fPIC \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-march=native \
	-DCPU_INTEL \
	-DHAVE_AVX2 \
	-DHAVE_SSE2 \
	-DHAVE_SSSE3 \
	-DHAVE_AVX512F \
	-std=gnu11      -fPIC -DNDEBUG -Ofast -fno-fast-math -w

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++1y \
	-march=native \
	-DCPU_INTEL \
	-std=gnu++11 -s -fPIC -DNDEBUG -Ofast -fno-fast-math -fexceptions -fno-rtti -Wno-class-memaccess -w

INCS_Debug := \
	-I/usr/include/nodejs/include/node \
	-I/usr/include/nodejs/src \
	-I/usr/include/nodejs/deps/openssl/config \
	-I/usr/include/nodejs/deps/openssl/openssl/include \
	-I/usr/include/nodejs/deps/uv/include \
	-I/usr/include/nodejs/deps/zlib \
	-I/usr/include/nodejs/deps/v8/include \
	-I$(srcdir)/xmrig-override \
	-I$(srcdir)/xmrig \
	-I$(srcdir)/xmrig/3rdparty/argon2/include \
	-I$(srcdir)/xmrig/3rdparty/argon2/lib \
	-I$(srcdir)/../nan

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=cryptonight-hashing' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-fPIC \
	-O3 \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release := \
	-march=native \
	-DCPU_INTEL \
	-DHAVE_AVX2 \
	-DHAVE_SSE2 \
	-DHAVE_SSSE3 \
	-DHAVE_AVX512F \
	-std=gnu11      -fPIC -DNDEBUG -Ofast -fno-fast-math -w

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++1y \
	-march=native \
	-DCPU_INTEL \
	-std=gnu++11 -s -fPIC -DNDEBUG -Ofast -fno-fast-math -fexceptions -fno-rtti -Wno-class-memaccess -w

INCS_Release := \
	-I/usr/include/nodejs/include/node \
	-I/usr/include/nodejs/src \
	-I/usr/include/nodejs/deps/openssl/config \
	-I/usr/include/nodejs/deps/openssl/openssl/include \
	-I/usr/include/nodejs/deps/uv/include \
	-I/usr/include/nodejs/deps/zlib \
	-I/usr/include/nodejs/deps/v8/include \
	-I$(srcdir)/xmrig-override \
	-I$(srcdir)/xmrig \
	-I$(srcdir)/xmrig/3rdparty/argon2/include \
	-I$(srcdir)/xmrig/3rdparty/argon2/lib \
	-I$(srcdir)/../nan

OBJS := \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/asm/cn_main_loop.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/asm/CryptonightR_template.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/r/CryptonightR_gen.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/gpu/cn_gpu_avx.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/gpu/cn_gpu_ssse3.o \
	$(obj).target/$(TARGET)/multihashing.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/c_blake256.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/c_groestl.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/c_jh.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/c_skein.o \
	$(obj).target/$(TARGET)/xmrig/crypto/common/keccak.o \
	$(obj).target/$(TARGET)/xmrig-override/crypto/common/Algorithm.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/CnCtx.o \
	$(obj).target/$(TARGET)/xmrig/crypto/cn/CnHash.o \
	$(obj).target/$(TARGET)/xmrig/crypto/common/MemoryPool.o \
	$(obj).target/$(TARGET)/xmrig/crypto/common/VirtualMemory.o \
	$(obj).target/$(TARGET)/xmrig/crypto/common/VirtualMemory_unix.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/aes_hash.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/argon2_ref.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/bytecode_machine.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/dataset.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/soft_aes.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/virtual_memory.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/vm_interpreted.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/allocator.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/randomx.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/superscalar.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/vm_compiled.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/vm_interpreted_light.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/argon2_core.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/blake2_generator.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/instructions_portable.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/reciprocal.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/virtual_machine.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/vm_compiled_light.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/blake2/blake2b.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/jit_compiler_x86_static.o \
	$(obj).target/$(TARGET)/xmrig/crypto/randomx/jit_compiler_x86.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/lib/argon2.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/lib/core.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/lib/encoding.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/lib/genkat.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/lib/impl-select.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/lib/blake2/blake2.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/argon2-arch.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/argon2-avx2.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/argon2-avx512f.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/argon2-sse2.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/argon2-ssse3.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/argon2-xop.o \
	$(obj).target/$(TARGET)/xmrig/3rdparty/argon2/arch/x86_64/lib/cpu-flags.o \
	$(obj).target/$(TARGET)/xmrig/crypto/defyx/defyx.o \
	$(obj).target/$(TARGET)/xmrig/crypto/defyx/KangarooTwelve.o \
	$(obj).target/$(TARGET)/xmrig/crypto/defyx/KeccakP-1600-reference.o \
	$(obj).target/$(TARGET)/xmrig/crypto/defyx/KeccakSpongeWidth1600.o \
	$(obj).target/$(TARGET)/xmrig/crypto/defyx/yescrypt-best.o \
	$(obj).target/$(TARGET)/xmrig/crypto/defyx/sha256.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.S FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.S FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	-lnode

$(obj).target/cryptonight-hashing.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/cryptonight-hashing.node: LIBS := $(LIBS)
$(obj).target/cryptonight-hashing.node: TOOLSET := $(TOOLSET)
$(obj).target/cryptonight-hashing.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/cryptonight-hashing.node
# Add target alias
.PHONY: cryptonight-hashing
cryptonight-hashing: $(builddir)/cryptonight-hashing.node

# Copy this to the executable output path.
$(builddir)/cryptonight-hashing.node: TOOLSET := $(TOOLSET)
$(builddir)/cryptonight-hashing.node: $(obj).target/cryptonight-hashing.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/cryptonight-hashing.node
# Short alias for building this executable.
.PHONY: cryptonight-hashing.node
cryptonight-hashing.node: $(obj).target/cryptonight-hashing.node $(builddir)/cryptonight-hashing.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/cryptonight-hashing.node

